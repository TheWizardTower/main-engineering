---
- name: Ensure docker group is present.
  group:
    name: docker
    state: present

- name: Ensure libvirt group is present.
  group:
    name: libvirt
    state: present

- name: Add user to docker group.
  user:
    name: "{{ user }}"
    group: docker
    append: yes

- name: Add user to docker libvirt.
  user:
    name: "{{ user }}"
    group: libvirt
    append: yes

- name: Capture Fedora release number.
  # warn: false # the rpm/dnf module doesn't let us do this, so don't chide
  # us to use it.
  shell: '/bin/rpm -E %fedora'
  args:
    warn: false
  register: rpm_release
  changed_when: false

- name: Import mono keys
  shell: "rpmkeys --import 'http://pool.sks-keyservers.net/pks/lookup?op=get&search=0x3fa7e0328081bff6a14da29aa6a19b38d3d831ef'"

- name: Check if Mono repo is installed.
  register: mono_repo
  stat:
    path: "/etc/yum.repos.d/microsoft-prod.repo"

- name: Set up mono repo.
  when: (mono_repo.exists is not defined or not
         mono_repo.exists)
  get_url:
    url: "https://download.mono-project.com/repo/centos8-stable.repo"
    dest: "/etc/yum.repos.d/mono-centos8-stable.repo"

- name: Import DotNet rpm key.
  shell: "rpm --import https://packages.microsoft.com/keys/microsoft.asc"
  args:
    warn: false # Not doable inside ansible, AFAIK.

- name: Set up DotNet repo
  get_url:
    url: "https://packages.microsoft.com/config/fedora/31/prod.repo"
    dest: "/etc/yum.repos.d/microsoft-prod.repo"

- name: Install rpmsphere repo (Required for fsharp)
  dnf:
    state: latest
    name:
      - "https://raw.githubusercontent.com/rpmsphere/noarch/master/r/rpmsphere-release-30-1.noarch.rpm"

- name: Enable RPMFusion Free and Non-Free.
  dnf:
    state: latest
    name:
      - "https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ rpm_release.stdout }}.noarch.rpm"
      - "https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ rpm_release.stdout }}.noarch.rpm"

- name: Copy a functional version of systemctl if we're on WSL.
  when: "'Microsoft' in ansible_facts.kernel"
  get_url:
    url: "https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement/master/files/docker/systemctl.py"
    dest: "/usr/bin/systemctl"
    mode: +x

- name: Check if ANTLR is installed.
  register: antlr
  stat:
    path: "/usr/local/lib/antlr-4.7.1-complete.jar"

- name: Try to run ANTLR v4.
  become: true
  become_user: "{{ user }}"
  register: antlr_exec
  ignore_errors: true
  shell:
    cmd: "fish -c 'antlr4'"

- name: Get ANTLR V4.
  when: (antlr.exists is defined and not
         antlr.exists) or
         (antlr_exec.failed is defined and
          antlr_exec.failed)
  get_url:
    url: "https://www.antlr.org/download/antlr-4.7.1-complete.jar"
    dest: "/usr/local/lib/antlr-4.7.1-complete.jar"
    mode: +x

- name: Install tools to help me study compilers!
  dnf:
    state: latest
    name:
      - bison
      - byacc
      - flex

- name: Install benchmarking tools.
  dnf:
    state: latest
    name:
      - atop
      - blktrace
      - ethtool
      - fatrace
      - fio
      - flamegraph
      - hdparm
      - hping3
      - htop
      - httpd-tools
      - iftop
      - iotop
      - iperf
      - java-latest-openjdk-devel
      - lsof
      - ltrace
      - mtr
      - perf
      - procps-ng
      - psmisc
      - strace
      - sysbench
      - sysstat
      - systemtap
      - tcpdump
      - tiptop
      - traceroute
      - ttcp

- name: Install compilers and libraries.
  dnf:
    state: latest
    name:
      - PyYAML # Used for dotbot in the abrazo repo.
      - asciidoc
      - boost-static
      - cabal-rpm
      - clang
      - clojure
      - cmake
      - dotnet-sdk-3.1
      - fsharp
      - gcc-c++
      - gdb
      - golang
      - mono-complete
      - net-tools
      - nload
      - perl-core
      - python
      - ruby-devel

- name: Install packaged development tools.
  dnf:
    state: latest
    name:
      - ack
      - colordiff
      - colorgcc
      - cowsay
      - cppcheck
      - dash
      - docker
      - emacs
      - fish
      - fortune-mod
      - gem
      - git
      - git-extras
      - git-svn
      - hub
      - iproute
      - irssi
      - jq
      - lastpass-cli
      - lldpad
      - lynx
      - mc
      - mercurial
      - most
      - npm
      - numactl
      - openssh
      - openssh-server
      - pcp-system-tools
      - perl-criticism
      - perltidy
      - php-pear
      - pv
      - python3-pip
      - rpmlint
      - screen
      - subversion
      - the_silver_searcher
      - tmux
      - tree
      - vim-enhanced
      - vnstat
      - zsh

- name: Start and enable sshd.
  systemd:
    enabled: yes
    name: sshd
    state: started

- name: Ensure that Kubernetes is not installed.
  when: "'Microsoft' not in ansible_facts.kernel"
  dnf:
    state: absent
    name:
      - kubernetes # OpenShift and k8s can't co-exist.

- name: Install programs specific to a bare-metal Fedora install.
  when: "'Microsoft' not in ansible_facts.kernel"
  dnf:
    state: latest
    name:
      - NetworkManager-tui
      - docker
      - libvirt
      - libvirt-daemon-kvm
      - origin
      - origin-web-console
      - qemu-kvm
      - vagrant

- name: Get KVM driver.
  get_url:
    dest: "/usr/local/bin/docker-machine-driver-kvm"
    url: "https://github.com/dhiltgen/docker-machine-kvm/releases/download/v0.10.0/docker-machine-driver-kvm-centos7"
    mode: +x

- name: Create ~/local/bin
  file:
    path: "/home/{{ user }}/{{ item }}"
    state: directory
    owner: "{{ user }}"
    group: "{{ user }}"
  loop:
    - "local"
    - "local/bin"

- name: Install "simple" npm packages.
  loop: "{{ simple_npm_packages }}"
  npm:
    name: "{{ item }}"
    state: latest
    global: false
    path: "/home/{{ user }}"

- name: Configure "simple" npm packages.
  loop: "{{ simple_npm_packages }}"
  file:
    path: "/home/{{ user }}/local/bin/{{ item }}"
    src: "/home/{{ user }}/node_modules/{{ item }}/bin/{{ item }}"
    state: link
    owner: "{{ user }}"
    group: "{{ user }}"

- name: Install not-so-simple npm packages.
  npm:
    name: "{{ item }}"
    state: latest
    global: false
    path: "/home/{{ user }}"
  loop:
    - align-yaml
    - eslint
    - eslint-config-standard
    - eslint-plugin-react
    - js-beautify
    - js-yaml
    - standard

- name: Setup eslint and js-yaml.
  file:
    path: "/home/{{ user }}/local/bin/{{ item }}"
    src: "/home/{{ user }}/node_modules/{{ item }}/bin/{{ item }}.js"
    state: link
    owner: "{{ user }}"
    group: "{{ user }}"
  loop:
    - eslint
    - js-yaml

- name: Setup js-beautify.
  file:
    path: "/home/{{ user }}/local/bin/{{ item }}"
    src: "/home/{{ user }}/node_modules/js-beautify/js/bin/{{ item }}.js"
    state: link
    owner: "{{ user }}"
    group: "{{ user }}"
  loop:
    - 'css-beautify'
    - 'html-beautify'
    - 'js-beautify'

- name: Setup align-yaml.
  file:
    path: "/home/{{ user }}/local/bin/align"
    src: "/home/{{ user }}/node_modules/align-yaml/bin/align"
    state: link
    owner: "{{ user }}"
    group: "{{ user }}"

- name: Setup standard.
  file:
    path: "/home/{{ user }}/local/bin/standard"
    src: "/home/{{ user }}/node_modules/standard/bin/cmd.js"
    state: link
    owner: "{{ user }}"
    group: "{{ user }}"

- name: Install Gem package (sqlint).
  gem:
    name: sqlint
    state: latest
    user_install: false

- name: Install Pear packages (phpcs).
  pear:
    name: PHP_CodeSniffer
    state: latest

- name: Ensure packaged powerline is _not_ present.
  dnf:
    state: absent
    name:
      - powerline
      - tmux-powerline
      - vim-powerline

- name: Install pip3 packages.
  pip:
    state: latest
    executable: pip3
    name:
      - ansible
      - ansible-lint
      - black
      - flake8
      - powerline-status
      - pylint
      - yamllint
      - yq

- name: Install -devel packages for threadscope.
  dnf:
    state: latest
    name:
      - cairo-devel
      - glib2-devel
      - gtk2-devel
      - pango-devel

- name: Checkout Dotfiles repo.
  become: true
  become_user: "{{ user }}"
  git:
    accept_hostkey: yes
    dest: "/home/{{ user }}/abrazo"
    repo: https://github.com/TheWizardTower/abrazo.git
    update: no

- name: Check if stock bashrc exists.
  register: bashrc_stat
  ignore_errors: true
  stat:
    path: "/home/{{ user }}/.bashrc"

- name: Move bashrc if it's not a link.
  when: bashrc_stat.islnk is not defined or not bashrc_stat.islnk
  shell:
    cmd: "mv /home/{{ user }}/.bashrc /home/{{ user }}/.bashrc_stock"

- name: Check if stack bash profile exists.
  register: bash_prof_stat
  ignore_errors: true
  stat:
    path: "/home/{{ user }}/.bash_profile "

- name: Move bash_profile if it's not a link.
  when: bash_prof_stat.islnk is not defined or not bash_prof_stat.islnk
  shell:
    cmd: "mv /home/{{ user }}/.bash_profile /home/{{ user }}/.bash_profile_stock"

- name: Create abrazo dotfile symlinks.
  become: true
  become_user: "{{ user }}"
  file:
    src: "/home/{{ user }}/abrazo/{{ item }}"
    dest: "/home/{{ user }}/.{{ item }}"
    state: link
  loop:
    - alias
    - bash_profile
    - bashrc
    - eslintrc.js
    - haskeline
    - mypy.ini
    - screenrc
    - shellrc
    - spacemacs
    - tmux.conf
    - toprc
    - xmobarrc

- name: Create abrazo dotfile hard links.
  become: true
  become_user: "{{ user }}"
  file:
    src: "/home/{{ user }}/abrazo/{{ item }}"
    dest: "/home/{{ user }}/.{{ item }}"
    state: hard
  loop:
    - git_template/
    - xmonad/

- name: Create abrazo dotfile symlinks.
  become: true
  become_user: "{{ user }}"
  file:
    src: "/home/{{ user }}/abrazo/{{ item.src }}"
    dest: "/home/{{ user }}/{{ item.dest }}"
  loop:
    - { src: "config.yaml", dest: ".stack/config.yaml" }
    - { src: "stack.yaml", dest: ".stack/global-project/stack.yaml" }

- name: Setup abrazo dotfiles.
  become: true
  become_user: "{{ user }}"
  shell: "/home/{{ user }}/abrazo/install"
  args:
    chdir: "/home/{{ user }}/abrazo"

- name: Checkout a copy of Spacemacs.
  become: true
  become_user: "{{ user }}"
  git:
    accept_hostkey: true
    dest: "/home/{{ user }}/.emacs.d"
    repo: "https://github.com/syl20bnr/spacemacs.git"
    update: yes

- name: Checkout a copy of Tmux Plugin Manager
  become: true
  become_user: "{{ user }}"
  git:
    accept_hostkey: true
    dest: "/home/{{ user }}/.tmux/plugins/tpm"
    repo: https://github.com/tmux-plugins/tpm
    update: true

- name: Create ~/git
  become: true
  become_user: "{{ user }}"
  file:
    path: "/home/{{ user }}/git"
    state: directory

# Need to make the ~/git dir
- name: Checkout useful git repos.
  become: true
  become_user: "{{ user }}"
  register: gitclone
  # github.com is crashing rn.
  ignore_errors: true
  git:
    accept_hostkey: true
    dest: "/home/{{ user }}/git/{{ item.dest }}"
    repo: "{{ item.src }}"
    update: true
  loop:
    - { src: 'https://github.com/Airblader/xcb-util-xrm.git', dest: 'xcb-util-xrm' }
    - { src: 'https://github.com/BiteMyApp/lefortovo.git', dest: 'lefortovo' }
    - { src: 'https://github.com/DanielG/cabal-helper.git', dest: 'cabal-helper' }
    - { src: 'https://github.com/DanielG/ghc-mod.git', dest: 'ghc-mod' }
    - { src: 'https://github.com/LuRsT/hr.git', dest: 'hr' }
    - { src: 'https://github.com/agda/agda.git', dest: 'agda' }
    - { src: 'https://github.com/alanz/HaRe.git', dest: 'HaRe' }
    - { src: 'https://github.com/bobthecow/git-flow-completion.git', dest: 'git-flow-completion', }
    - { src: 'https://github.com/carlohamalainen/ghc-imported-from', dest: 'ghc-imported-from' }
    - { src: 'https://github.com/chrisdone/jl.git', dest: 'jl' }
    - { src: 'https://github.com/creichert/stack-tag.git', dest: 'stack-tag' }
    - { src: 'https://github.com/dominikh/go-tools.git', dest: 'go-tools' }
    - { src: 'https://github.com/edc/bass.git', dest: 'bass' }
    - { src: 'https://github.com/favadi/flycheck-gometalinter.git', dest: 'flycheck-gometalinter' }
    - { src: 'https://github.com/garabik/grc.git', dest: 'grc' }
    - { src: 'https://github.com/girst/solvitaire.git', dest: 'solvitaire' }
    - { src: 'https://github.com/github/hub.git', dest: 'hub' }
    - { src: 'https://github.com/jonas/tig.git', dest: 'tig' }
    - { src: 'https://github.com/joshuaclayton/unused.git', dest: 'unused' }
    - { src: 'https://github.com/junegunn/fzf.git', dest: 'fzf' }
    - { src: 'https://github.com/kanaka/mal.git', dest: 'mal' }
    - { src: 'https://github.com/kanaka/mal.workshop.git', dest: 'mal.workshop' }
    - { src: 'https://github.com/ndmitchell/ghcid.git', dest: 'ghcid' }
    - { src: 'https://github.com/orhun/pkgtop.git', dest: 'pkgtop' }
    - { src: 'https://github.com/replicatedhq/dockerfilelint.git', dest: 'dockerfilelint' }
    - { src: 'https://github.com/sboli/twmn.git', dest: 'twmn' }
    - { src: 'https://github.com/tj/git-extras.git', dest: 'git-extras' }
    - { src: 'https://github.com/trapd00r/LS_COLORS.git', dest: 'LS_COLORS' }
    - { src: 'https://github.com/unixorn/git-extra-commands.git', dest: 'git-extra-commands' }
    - { src: 'https://gitlab.com/o9000/tint2.git', dest: 'tint2' }

- name: Try to find bass!
  become: true
  become_user: "{{ user }}"
  shell: "bass ls"
  ignore_errors: true
  register: bass_output

- name: Setup bass.
  become: true
  become_user: "{{ user }}"
  shell: "make install"
  args:
    chdir: "/home/{{ user }}/git/bass"
  when:
    (item['item'] == "bass" and
    item['changed'] == "true") or
    (bass_output is defined and bass_output.failed)
  loop:
    "{{ gitclone.results }}"
  loop_control:
    loop_var: item

- name: Try to find pkgtop!
  become: true
  become_user: "{{ user }}"
  shell: "pkgtop -v"
  ignore_errors: true
  register: pkgtop_output

- name: Build and install pkgtop.
  become: true
  become_user: "{{ user }}"
  shell: "fish -lc 'go get ./...; and go build src/pkgtop.go && mv pkgtop /home/{{ user }}/gocode/bin'"
  args:
    chdir: "/home/{{ user }}/git/pkgtop"
  when:
    (item['item'] == "pkgtop" and
    item['changed'] == "true") or
    (pkgtop_output.failed is defined and pkgtop_output.failed)
  loop:
    "{{ gitclone.results }}"
  loop_control:
    loop_var: item

- name: Build and install go-tools.
  become: true
  become_user: "{{ user }}"
  shell: "fish -lc 'for ii in (ls); echo $ii; pushd $ii; go get -u; popd; end'"
  args:
    chdir: "/home/{{ user }}/git/go-tools/cmd"
  when:
    (item['item'] == "go-tools" and
     item['changed'] == "true")
  loop:
    "{{ gitclone.results }}"
  loop_control:
    loop_var: item

- name: Clean go-tools repo.
  become: true
  become_user: "{{ user }}"
  shell: git restore go.mod go.sum
  args:
    chdir: /home/{{ user }}/git/go-tools/

- name: Try to find fzf!
  become: true
  become_user: "{{ user }}"
  ignore_errors: true
  register: fzf_output
  shell: "fzf --help"

- name: Setup fzf.
  args:
    chdir: /home/{{ user }}/git/fzf
  become: true
  become_user: "{{ user }}"
  shell: "/home/{{ user }}/git/fzf/install --all"
  when:
    (item['item'] == "fzf" and
     item['changed'] == "true") or
     (fzf_output.failed is defined and fzf_output.failed)
  loop:
    "{{ gitclone.results }}"
  loop_control:
    loop_var: item

- name: Setup LS_COLORS.
  file:
    path: /home/{{ user }}/.dircolors
    src: /home/{{ user }}/git/LS_COLORS/LS_COLORS
    state: link
    owner: "{{ user }}"
    group: "{{ user }}"

- name: Try to find GRC.
  become: true
  become_user: "{{ user }}"
  shell: "grc"
  ignore_errors: true
  register: grc_output

- name: Setup GRC.
  args:
    chdir: "/home/{{ user }}/git/grc"
  shell: "/home/{{ user }}/git/grc/install.sh"
  when:
    (item['item'] == "grc" and
     item['changed'] == "true") or
     (grc_output.failed is defined and grc_output.failed)
  loop:
    "{{ gitclone.results }}"
  loop_control:
    loop_var: item

- name: Try to find hr.
  become: true
  become_user: "{{ user }}"
  ignore_errors: true
  register: hr_output
  shell: "hr"

- name: Install hr.
  args:
    chdir: "/home/{{ user }}/git/hr"
  shell: "make install"
  when:
    (item['item'] == "hr" and
     item['changed'] == "true") or
     (hr_output.failed is defined and hr_output.failed)
  loop:
    "{{ gitclone.results }}"
  loop_control:
    loop_var: item

- name: Try to find tig.
  become: true
  become_user: "{{ user }}"
  ignore_errors: true
  register: tig_output
  shell: "tig --version"

- name: Build and install tig.
  args:
    chdir: "/home/{{ user }}/git/tig"
  become: true
  become_user: "{{ user }}"
  shell: "make; make install; make install-doc; make install-release-doc"
  when:
    (item['item'] == "tig" and
    item['changed'] == "true") or
    (tig_output.failed is defined and tig_output.failed)
  loop:
    "{{ gitclone.results }}"
  loop_control:
    loop_var: item

- name: Update golang godoc tool.
  shell:
    cmd: "go get -u golang.org/x/tools/cmd/godoc"

- name: Install golang user tools and libraries.
  args:
    chdir: "/home/{{ user }}"
  become: true
  become_user: "{{ user }}"
  shell:
    cmd: "go get -u {{ item }}"
  loop:
    - github.com/anacrolix/missinggo
    - github.com/bradfitz/iter
    - github.com/google/btree
    - github.com/kbrgl/fu
    - github.com/kisielk/errcheck
    - github.com/mdempsky/unconvert
    - github.com/motemen/gore
    - github.com/nsf/gocode
    - github.com/peco/peco/cmd/peco
    - github.com/rogpeppe/godef
    - github.com/ryszard/goskiplist/skiplist
    - github.com/shurcooL/markdownfmt
    - github.com/tokozedg/sman
    - golang.org/x/lint/golint
    - golang.org/x/tools/cmd/cover
    - golang.org/x/tools/cmd/gorename
    - golang.org/x/tools/cmd/guru

- name: Create tmp dir.
  file:
    group: "{{ user }}"
    owner: "{{ user }}"
    path: "/home/{{ user }}/tmp"
    state: directory

- name: Get golangcli-lint install script.
  get_url:
    dest: "/home/{{ user }}/tmp/golangcli-lint.sh"
    force: true
    mode: u=rwx
    owner: "{{ user }}"
    url: "https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh"

- name: Install golangci-lint.
  become: true
  become_user: "{{ user }}"
  register: golangcli
  args:
    chdir: "/home/{{ user }}"
  shell:
    cmd: "sh ~/tmp/golangcli-lint.sh -b $(go env GOPATH)/bin"

- name: Install library packages for rust support commands.
  dnf:
    state: latest
    name:
      - libgit2-devel
      - libssh2-devel
      - openssl-devel
      - openssl-libs
      - pkgconf-pkg-config

- name: Ensure packaged rust is _not_ present.
  dnf:
    state: absent
    name:
      - rust
      - rust-doc
      - rust-lldb
      - rust-src
      - rust-std-static

- name: Updating rustup.
  args:
    chdir: "/home/{{ user }}"
  become: true
  become_user: "{{ user }}"
  ignore_errors: true
  register: rustup
  shell:
    cmd: "/home/{{ user }}/.cargo/bin/rustup update"

- name: Get rustup install script.
  when: 'rustup.failed is defined and rustup.failed'
  get_url:
    dest: "/home/{{ user }}/tmp/rustup.sh"
    force: true
    mode: u=rwx
    owner: "{{ user }}"
    url: "https://sh.rustup.rs"

- name: Install rustup.
  args:
    chdir: "/home/{{ user }}"
  become: true
  become_user: "{{ user }}"
  when: 'rustup.failed is defined and rustup.failed'
  shell:
    cmd: "sh ~/tmp/rustup.sh -y"

- name: Updating Cargo Update
  args:
    chdir: "/home/{{ user }}"
  become: true
  become_user: "{{ user }}"
  ignore_errors: true
  register: cargo_update
  shell:
    cmd: "/home/{{ user }}/.cargo/bin/cargo install-update cargo-update"

- name: Install Cargo Update.
  args:
    chdir: "/home/{{ user }}"
  become: true
  become_user: "{{ user }}"
  when: '"no such subcommand" in cargo_update.stderr'
  shell:
    cmd: "/home/{{ user }}/.cargo/bin/cargo install --force cargo-update"

- name: Install cargo (rust) user tools.
  args:
    chdir: "/home/{{ user }}"
  become: true
  become_user: "{{ user }}"
  shell:
    cmd: "/home/{{ user }}/.cargo/bin/cargo install-update {{ item }}"
  loop:
    - cargo-check
    - cargo-edit
    - cargo-graph
    - cargo-script
    - cargo-watch
    - flamegraph
    - kickstart
    - ptags
    - ripgrep
    - xsv
    - -a   # update all packages.

# Broken at present, because clippy doesn't have a nightly build for linux.
# - name: Setup nightly build rustc toolchain.
#   become: true
#   become_user: "{{ user }}"
#   args:
#    chdir: "/home/{{ user }}"
#   shell:
#     cmd: "/home/{{ user }}/.cargo/bin/rustup toolchain add nightly"

# - name: Install racer (rust tool that needs nightly)
#   become: true
#   become_user: "{{ user }}"
#   args:
#     chdir: "/home/{{ user }}"
#   shell:
#     cmd: "cargo install-update +nightly racer"

- name: Install lefortovo.
  become: true
  become_user: "{{ user }}"
  ignore_errors: true
  # when: "gitclone.stdout"
  shell: "/home/{{ user }}/.cargo/bin/cargo install --path . --force"
  args:
    chdir: "/home/{{ user }}/git/lefortovo"

- name: Install library packages for Stack utilities.
  dnf:
    state: latest
    name:
      - ncurses-devel
      - ncurses-libs
      - ncurses-compat-libs

- name: Update and upgrade stack.
  ignore_errors: true
  register: stack_output
  shell: "stack update && stack upgrade"

- name: Install stack if it isn't found.
  when: stack_output.failed and stack_output.failed
  shell:
    cmd: "curl -sSL https://get.haskellstack.org/ | sh"

- name: Try to find jl.
  become: true
  become_user: "{{ user }}"
  ignore_errors: true
  register: jl_output
  shell: "jl --help"

- name: Build and install jl.
  args:
    chdir: "/home/{{ user }}/git/jl"
  become: true
  become_user: "{{ user }}"
  shell: stack install
  when:
    (item['item'] == "jl" and
    item['changed'] == "true") or
    (jl_output.failed is defined and jl_output.failed)
  loop:
    "{{ gitclone.results }}"
  loop_control:
    loop_var: item

- name: Install stack (haskell) user tools.
  become: true
  become_user: "{{ user }}"
  args:
    chdir: "/home/{{ user }}"
  shell:
    cmd: "stack install {{ item }}"
  loop:
    - QuickCheck
    - aeson
    - bench
    - bytestring
    - containers
    - cpphs
    - criterion
    - dhall
    - ghc-prof-flamegraph
    - ghcid
    - ghcide
    - happy
    - hasktags
    - hlint
    - hoogle
    - lens
    - lens-aeson
    - megaparsec
    - mtl
    - optparse-applicative
    - stylish-haskell
    - text
    - turtle
    - weeder

# Pandoc takes >36 hours to build on my old-as-sin laptop, so don't build it there.
- name: Install Pandonc, but only on my main dev rig.
  when: ansible_facts['processor_cores'] != 2
  become: true
  become_user: "{{ user }}"
  args:
    chdir: "/home/{{ user }}"
  shell:
    cmd: "stack install {{ item }}"
  loop:
    - pandoc

- name: Install Pandonc, but only on my main dev rig.
  when: ansible_facts['processor_cores'] == 2
  dnf:
    name: pandoc
    state: latest

- name: Install stack (haskell) tools that need a particular resolver.
  become: true
  become_user: "{{ user }}"
  args:
    chdir: "/home/{{ user }}"
  shell:
    cmd: "stack install {{ item.name }} --resolver {{ item.resolver }}"
  loop:
    - { name: 'ShellCheck', resolver: 'lts-14.10' }
    - { name: 'present', resolver: 'lts-14.10' }
    - { name: 'threadscope', resolver: 'lts-14.10' }

- name: Get ELPA GPG key.
  become: true
  become_user: "{{ user }}"
  args:
    chdir: "/home/{{ user }}"
  shell:
    cmd: 'gpg --homedir ~/.emacs.d/elpa/gnupg --receive-keys 066DAFCB81E42C40'

- name: Install/Update Emacs Packages
  become: true
  become_user: "{{ user }}"
  args:
    chdir: "/home/{{ user }}"
  shell:
    cmd: 'emacs --batch -l ~/.emacs.d/init.el --eval="(configuration-layer/update-packages t)"'

- name: Update packages.
  dnf:
    name: '*'
    state: latest
